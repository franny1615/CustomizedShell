@implements IDisposable
@inject NavigationManager Navigation

@page "/login"

<div class="centered-div-vertical">
    <div class="login-container centered-div bg-body-secondary rounded-3">
        <div style="display: flex;flex-direction: column;width: 90%;">
            <div style="display: flex; flex-direction: row;justify-content:start; align-items: center; gap: 8px;margin-bottom: 8px;">
                <img src="images/app_ic.svg" width="40" height="40" />
                <label style="font-size: 21px; font-weight: bold;">@LoginTxt</label>
            </div>
            <div>
                <label for="username-input" class="form-label">@Username</label>
                <input type="text" id="username-input" class="form-control" aria-describedby="username-help">
                <div id="username-help" class="form-text"></div>
            </div>
            <div>
                <label for="password-input" class="form-label">@Password</label>
                <input type="password" id="password-input" class="form-control" aria-describedby="password-help">
                <div id="password-help" class="form-text"></div>
            </div>
            <div style="display: flex;flex-direction: row;align-items: end;justify-content: end;gap: 8px;margin-top: 8px;">
                <button type="button" class="btn btn-secondary" @onclick="GoRegister">@Register</button>
                <button type="button" class="btn btn-primary">@LoginTxt</button>
            </div>
        </div>
    </div>
    <div style="display: flex;flex-direction: row;justify-content: center;gap: 8px;">
        <ThemeToggler></ThemeToggler>
        <LanguageToggler></LanguageToggler>
    </div>
</div>

@code {
    private string LoginTxt = string.Empty;
    private string Username = string.Empty;
    private string Password = string.Empty;
    private string Register = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RefreshLanguageKeys();
        WeakReferenceMessenger.Default.Register<InternalMessage>(this, (_, msg) => 
        {
            if (msg.Value is string message) 
            {
                HandleInternalMessage(message);
            }
        }); 
    }

    void IDisposable.Dispose()
    {
        WeakReferenceMessenger.Default.Unregister<InternalMessage>(this);
    }

    private void HandleInternalMessage(string message) 
    {
        if (message == "language-changed")
        {
            RefreshLanguageKeys();
        }
    }

    private void RefreshLanguageKeys() 
    {
        LoginTxt = Language.Instance["Login"];
        Username = Language.Instance["Username"];
        Password = Language.Instance["Password"];
        Register = Language.Instance["Register"];
        LoginTxt = Language.Instance["Login"];
        StateHasChanged();
    }

    private void GoRegister() 
    {
        Navigation.NavigateTo("/register");
    }
}
