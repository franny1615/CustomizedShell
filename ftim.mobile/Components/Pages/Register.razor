@implements IDisposable
@inject NavigationManager Navigation

@page "/register"

<div style="display: flex; flex-direction: column; gap: 8px; align-items: center; overflow-y: scroll; width: 100%; height: -webkit-fill-available; overscroll-behavior: contain;">
    <div class="bg-body-secondary rounded-3" style="display: flex;flex-direction: column;width: 95%;padding: 1rem;">
        <div style="display: flex; flex-direction: row;justify-content:start; align-items: center; gap: 8px;margin-bottom: 8px;">
            <img src="images/app_ic.svg" width="40" height="40" />
            <label style="font-size: 21px; font-weight: bold;">@CompanyDetails</label>
        </div>
        <div>
            <label for="company-name-input" class="form-label">Company Name</label>
            <input type="text" id="company-name-input" class="form-control" aria-describedby="company-name-help">
            <div id="company-name-help" class="form-text"></div>
        </div>
        <div>
            <label for="address1-input" class="form-label">Address 1</label>
            <input type="text" id="address1-input" class="form-control" aria-describedby="address1-help">
            <div id="username-help" class="form-text"></div>
        </div>
        <div>
            <label for="address2-input" class="form-label">Address 2</label>
            <input type="text" id="address2-input" class="form-control" aria-describedby="address2-help">
            <div id="address2-help" class="form-text"></div>
        </div>
        <div>
            <label for="address3-input" class="form-label">Address 3</label>
            <input type="text" id="address3-input" class="form-control" aria-describedby="address3-help">
            <div id="address3-help" class="form-text"></div>
        </div>
        <div>
            <label for="city-input" class="form-label">City</label>
            <input type="text" id="city-input" class="form-control" aria-describedby="city-help">
            <div id="city-help" class="form-text"></div>
        </div>
        <div>
            <label for="state-input" class="form-label">State</label>
            <input type="text" id="state-input" class="form-control" aria-describedby="state-help">
            <div id="state-help" class="form-text"></div>
        </div>
        <div>
            <label for="country-input" class="form-label">Country</label>
            <input type="text" id="country-input" class="form-control" aria-describedby="country-help">
            <div id="country-help" class="form-text"></div>
        </div>
        <div>
            <label for="zip-input" class="form-label">Zip</label>
            <input type="text" id="zip-input" class="form-control" aria-describedby="zip-help">
            <div id="zip-help" class="form-text"></div>
        </div>
    </div>
    <div class="bg-body-secondary rounded-3" style="display: flex;flex-direction: column;width: 95%;padding: 1rem;">
        <div style="display: flex; flex-direction: row;justify-content:start; align-items: center; gap: 8px;margin-bottom: 8px;">
            <label style="font-size: 21px; font-weight: bold;">@UserDetails</label>
        </div>
    </div>
    <div style="display: flex;flex-direction: row;align-items: center;justify-content: center;gap: 8px;width: 95%;">
        <button type="button" class="btn btn-secondary" @onclick="NavBack" style="font-size: 21px; font-weight: bold; min-height: 48px;">@GoBack</button>
        <button type="button" class="btn btn-primary" @onclick="RegisterActual" style="font-size: 21px; font-weight: bold; flex-grow: 1; min-height: 48px;">@RegisterTxt</button>
    </div>
</div>

@code {
    private string CompanyDetails = string.Empty;
    private string UserDetails = string.Empty;
    private string GoBack = string.Empty;
    private string RegisterTxt = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RefreshLanguageKeys();
        WeakReferenceMessenger.Default.Register<InternalMessage>(this, (_, msg) => 
        {
            if (msg.Value is string message) 
            {
                HandleInternalMessage(message);
            }
        }); 
    }

    void IDisposable.Dispose()
    {
        WeakReferenceMessenger.Default.Unregister<InternalMessage>(this);
    }

    private void HandleInternalMessage(string message) 
    {
        if (message == "language-changed")
        {
            RefreshLanguageKeys();
        }
    }

    private void RefreshLanguageKeys() 
    {
        CompanyDetails = Language.Instance["Company"];
        UserDetails = Language.Instance["Login"];
        GoBack = Language.Instance["Go Back"];
        RegisterTxt = Language.Instance["Register"];
        StateHasChanged();
    }

    private void NavBack() 
    {
        Navigation.NavigateTo("/login");
    }

    private void RegisterActual() 
    {

    }
}
