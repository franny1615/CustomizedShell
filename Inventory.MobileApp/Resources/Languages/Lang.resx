<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Choose Language" xml:space="preserve">
    <value>Choose Language</value>
  </data>
  <data name="Choose Theme" xml:space="preserve">
    <value>Choose Theme</value>
  </data>
  <data name="Dark" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="Inventory Management" xml:space="preserve">
    <value>Inventory Management</value>
  </data>
  <data name="Light" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="Company Details" xml:space="preserve">
    <value>Company Details</value>
  </data>
  <data name="Company Name" xml:space="preserve">
    <value>Company Name</value>
  </data>
  <data name="Address 1" xml:space="preserve">
    <value>Address 1</value>
  </data>
  <data name="Address 2" xml:space="preserve">
    <value>Address 2</value>
  </data>
  <data name="Address 3" xml:space="preserve">
    <value>Address 3</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="Zip" xml:space="preserve">
    <value>Zip</value>
  </data>
  <data name="Account Details" xml:space="preserve">
    <value>Account Details</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Phone Number" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="Email has been verified." xml:space="preserve">
    <value>Email has been verified.</value>
  </data>
  <data name="Email Verification" xml:space="preserve">
    <value>Email Verification</value>
  </data>
  <data name="Email verification failed." xml:space="preserve">
    <value>Email verification failed.</value>
  </data>
  <data name="EmailVerificationMessage" xml:space="preserve">
    <value>A verification code will be sent to {0}.

Verified email is used to recover a lost account.</value>
  </data>
  <data name="EnterVerifCode" xml:space="preserve">
    <value>Enter code sent to {0}.</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorMsg" xml:space="preserve">
    <value>Oops!  We encountered an error with your request.
Would you like to share the error with us?</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Optional" xml:space="preserve">
    <value>Optional</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="Sending Code" xml:space="preserve">
    <value>Sending Code</value>
  </data>
  <data name="Share" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="Validating" xml:space="preserve">
    <value>Validating</value>
  </data>
  <data name="Registering" xml:space="preserve">
    <value>Registering</value>
  </data>
  <data name="Please enter a unique username." xml:space="preserve">
    <value>Please enter a unique username.</value>
  </data>
  <data name="Logging In" xml:space="preserve">
    <value>Logging In</value>
  </data>
  <data name="Enter Credentials" xml:space="preserve">
    <value>Enter Credentials</value>
  </data>
  <data name="Incorrect username/password. Please try again." xml:space="preserve">
    <value>Incorrect username/password. Please try again.</value>
  </data>
  <data name="Dashboard" xml:space="preserve">
    <value>Dashboard</value>
  </data>
  <data name="Create account" xml:space="preserve">
    <value>Create account</value>
  </data>
  <data name="Employees" xml:space="preserve">
    <value>Employees</value>
  </data>
  <data name="Inventory" xml:space="preserve">
    <value>Inventory</value>
  </data>
  <data name="Locations" xml:space="preserve">
    <value>Locations</value>
  </data>
  <data name="Qty Types" xml:space="preserve">
    <value>Qty Types</value>
  </data>
  <data name="Statuses" xml:space="preserve">
    <value>Statuses</value>
  </data>
  <data name="No items found" xml:space="preserve">
    <value>No items found</value>
  </data>
  <data name="Add Status" xml:space="preserve">
    <value>Add Status</value>
  </data>
  <data name="An empty status was entered, nothing changed." xml:space="preserve">
    <value>An empty status was entered, nothing changed.</value>
  </data>
  <data name="Empty Status" xml:space="preserve">
    <value>Empty Status</value>
  </data>
  <data name="Enter the status description below." xml:space="preserve">
    <value>Enter the status description below.</value>
  </data>
  <data name="Add Location" xml:space="preserve">
    <value>Add Location</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Enter the location description below." xml:space="preserve">
    <value>Enter the location description below.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Print" xml:space="preserve">
    <value>Print</value>
  </data>
  <data name="Share Barcode" xml:space="preserve">
    <value>Share Barcode</value>
  </data>
  <data name="Add Quantity Type" xml:space="preserve">
    <value>Add Quantity Type</value>
  </data>
  <data name="Enter the quantity type below." xml:space="preserve">
    <value>Enter the quantity type below.</value>
  </data>
  <data name="Quantity Types" xml:space="preserve">
    <value>Quantity Types</value>
  </data>
  <data name="In Use" xml:space="preserve">
    <value>In Use</value>
  </data>
  <data name="is in use in at least one inventory item" xml:space="preserve">
    <value>is in use in at least one inventory item</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Edit Location" xml:space="preserve">
    <value>Edit Location</value>
  </data>
  <data name="Edit Quantity Type" xml:space="preserve">
    <value>Edit Quantity Type</value>
  </data>
  <data name="Edit Status" xml:space="preserve">
    <value>Edit Status</value>
  </data>
  <data name="Profile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="q" xml:space="preserve">
    <value />
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Last Edited" xml:space="preserve">
    <value>Last Edited</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Quantity Type" xml:space="preserve">
    <value>Quantity Type</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Edit Description" xml:space="preserve">
    <value>Edit Description</value>
  </data>
  <data name="Edit Quantity" xml:space="preserve">
    <value>Edit Quantity</value>
  </data>
  <data name="Pick Location" xml:space="preserve">
    <value>Pick Location</value>
  </data>
  <data name="Pick Quantity Type" xml:space="preserve">
    <value>Pick Quantity Type</value>
  </data>
  <data name="Pick Status" xml:space="preserve">
    <value>Pick Status</value>
  </data>
  <data name="Add Inventory" xml:space="preserve">
    <value>Add Inventory</value>
  </data>
  <data name="Edit Email" xml:space="preserve">
    <value>Edit Email</value>
  </data>
  <data name="Edit Phone Number" xml:space="preserve">
    <value>Edit Phone Number</value>
  </data>
  <data name="Edit Company Name" xml:space="preserve">
    <value>Edit Company Name</value>
  </data>
  <data name="Edit Address1" xml:space="preserve">
    <value>Edit Address1</value>
  </data>
  <data name="Edit Address2" xml:space="preserve">
    <value>Edit Address2</value>
  </data>
  <data name="Edit Address3" xml:space="preserve">
    <value>Edit Address3</value>
  </data>
  <data name="Edit Country" xml:space="preserve">
    <value>Edit Country</value>
  </data>
  <data name="Edit City" xml:space="preserve">
    <value>Edit City</value>
  </data>
  <data name="Edit State" xml:space="preserve">
    <value>Edit State</value>
  </data>
  <data name="Edit Zip" xml:space="preserve">
    <value>Edit Zip</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
</root>